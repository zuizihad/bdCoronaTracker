{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.jsx","index.jsx","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","img/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","contaner","Grid","container","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","linerChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,4NCsGpJC,EAjGD,SAAC,GAA4D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,WAErD,OADAC,QAAQC,IAAIL,GACPA,EAIH,yBAAKM,UAAWC,IAAOC,UACrB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,UAClC,kBAACH,EAAA,EAAD,CACEI,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJX,UAAWY,IAAGX,IAAOY,KAAMZ,IAAOa,WAElC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAK3B,EAAU4B,MACfC,SAAU,IACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAK5B,GAAY6B,gBAExB,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SACjB,IADH,wCAMJ,kBAAChB,EAAA,EAAD,CACEI,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJX,UAAWY,IAAGX,IAAOY,KAAMZ,IAAON,YAElC,kBAACoB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAK1B,EAAU2B,MACfC,SAAU,IACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAK5B,GAAY6B,gBAExB,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SACjB,IADH,wCAMJ,kBAAChB,EAAA,EAAD,CACEI,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJX,UAAWY,IAAGX,IAAOY,KAAMZ,IAAOL,SAElC,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKzB,EAAO0B,MACZC,SAAU,IACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAK5B,GAAY6B,gBAExB,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SACjB,IADH,2CAnFD,c,yBCPLQ,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACnBC,EAAgBJ,EAEhBE,IACFE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJf,kBAQEG,IAAMC,IAAIF,GARZ,uBAQbtC,EARa,EAQbA,KAGFyC,EAAe,CACnBxC,UAAWD,EAAKC,UAChBC,UAAWF,EAAKE,UAChBC,OAAQH,EAAKG,OACbC,WAAYJ,EAAKI,YAfE,kBAiBdqC,GAjBc,4FAAH,sDAsBTC,EAAc,uCAAG,gCAAAL,EAAA,+EAEHE,IAAMC,IAAN,UAAaN,EAAb,WAFG,uBAElBlC,EAFkB,EAElBA,KAEFyC,EAAezC,EAAK2C,KAAI,SAACC,GAAD,MAAgB,CAC5C3C,UAAW2C,EAAU3C,UAAU4C,MAC/B1C,OAAQyC,EAAUzC,OAAO0C,MACzBC,KAAMF,EAAUG,eAPQ,kBASnBN,GATmB,yFAAH,qDAadO,EAAc,uCAAG,8BAAAX,EAAA,+EAIhBE,IAAMC,IAAN,UAAaN,EAAb,eAJgB,uBAGhBe,EAHgB,EAGxBjD,KAAQiD,UAHgB,kBAKnBA,EAAUN,KAAI,SAACP,GAAD,OAAaA,EAAQc,SALhB,yFAAH,qD,yBC2BZC,EA7DD,SAAC,GAAyD,IAAD,IAAtDnD,KAAQC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,OAAUiC,EAAc,EAAdA,QAAc,EACnCgB,mBAAS,IAD0B,mBAC9DR,EAD8D,KACnDS,EADmD,KAGrEC,qBAAU,YACM,uCAAG,sBAAAjB,EAAA,kEACfgB,EADe,SACIX,IADJ,6EAAH,qDAIda,KACC,IAEH,IAAMC,EAAaZ,EAAUa,OAC3B,kBAAC,IAAD,CACEzD,KAAM,CACJ0D,OAAQd,EAAUD,KAAI,qBAAGG,QACzBa,SAAU,CACR,CACE3D,KAAM4C,EAAUD,KAAI,qBAAG1C,aACvB2D,MAAO,WACPC,YAAa,SACbC,MAAM,GAER,CACE9D,KAAM4C,EAAUD,KAAI,qBAAGxC,UACvByD,MAAO,SACPC,YAAa,MACbE,gBAAiB,uBACjBD,MAAM,OAKZ,KAEEE,EAAW/D,EACf,kBAAC,IAAD,CACED,KAAM,CACJ0D,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACEC,MAAO,SACPG,gBAAiB,CACf,oBACA,oBACA,qBAEF/D,KAAM,CAACC,EAAU4B,MAAO3B,EAAU2B,MAAO1B,EAAO0B,UAItDoC,QAAS,CACPC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAsBjC,OAGpD,KACJ,OACE,yBAAK7B,UAAWC,IAAOG,WAAYyB,EAAU4B,EAAWR,I,mCC7B7Cc,EA5BO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EACDnB,mBAAS,IADR,mBAC1CoB,EAD0C,KACxBC,EADwB,KAWjD,OARAnB,qBAAU,YACM,uCAAG,sBAAAjB,EAAA,kEACfoC,EADe,SACWzB,IADX,6EAAH,qDAIdO,MAIA,kBAACmB,EAAA,EAAD,CAAanE,UAAWC,IAAOmE,aAC7B,kBAACC,EAAA,EAAD,CACEC,aAAa,GACbC,SAAU,SAACC,GAAD,OAAOR,EAAoBQ,EAAEC,OAAOnD,SAE9C,4BAAQA,MAAM,IAAd,UACC2C,EAAiB7B,KAAI,SAACP,EAAS6C,GAAV,OACpB,4BAAQC,IAAKD,EAAGpD,MAAOO,GACpBA,S,kCCeE+C,E,4MAjCbC,MAAQ,CACNpF,KAAM,GACNoC,QAAS,I,EAOXmC,oB,uCAAsB,WAAOnC,GAAP,eAAAC,EAAA,sEACMF,EAAUC,GADhB,OACdiD,EADc,OAEpB,EAAKC,SAAS,CAAEtF,KAAMqF,EAAajD,QAASA,IAFxB,2C,wPAJMD,I,OAApBkD,E,OACNE,KAAKD,SAAS,CAAEtF,KAAMqF,I,qIAOd,IAAD,EACmBE,KAAKH,MAAvBpF,EADD,EACCA,KAAMoC,EADP,EACOA,QACd,OACE,yBAAK7B,UAAWC,IAAOG,WACrB,yBAAKJ,UAAWC,IAAOgF,MAAOC,IAAKC,IAAaC,IAAI,aACpD,6BACA,6BACA,6BAEA,kBAAC,EAAD,CAAO3F,KAAMA,IACb,6BACA,6BACA,6BACA,kBAAC,EAAD,CAAeuE,oBAAqBgB,KAAKhB,sBACzC,6BACA,kBAAC,EAAD,CAAOvE,KAAMA,EAAMoC,QAASA,S,GA7BlBwD,IAAMC,WCDxBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,U,mBCJhDpG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCDhCD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.9f3bc729.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__odf7z\",\"card\":\"Cards_card__aZdPL\",\"infected\":\"Cards_infected__1rT-6\",\"recovered\":\"Cards_recovered__3C6lS\",\"deaths\":\"Cards_deaths__1VCQ9\"};","import React from \"react\";\r\nimport styles from \"./Cards.module.css\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  console.log(confirmed);\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  return (\r\n    <div className={styles.contaner}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              {\" \"}\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              {\" \"}\r\n              Number of recoveries from COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              {\" \"}\r\n              Number of deaths caused by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data } = await axios.get(changeableUrl);\r\n    //const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(url);\r\n\r\n    const modifiedData = {\r\n      confirmed: data.confirmed,\r\n      recovered: data.recovered,\r\n      deaths: data.deaths,\r\n      lastUpdate: data.lastUpdate,\r\n    };\r\n    return modifiedData;\r\n    // return {confirmed, recovered, deaths, lastUpdate};\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (eror) {}\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const linerChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0,0,255,0.5)\",\r\n              \"rgba(0,255,0,0.5)\",\r\n              \"rgba(255,0,0,0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : linerChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  });\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\nimport { Cards, CountryPicker, Chart } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\nimport coronaImage from \"./img/image.png\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: \"\",\r\n  };\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n  render() {\r\n    const { data, country } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <img className={styles.image} src={coronaImage} alt=\"COVID-19\" />\r\n        <br />\r\n        <br />\r\n        <br />\r\n\r\n        <Cards data={data} />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <br />\r\n        <Chart data={data} country={country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__17taw\",\"image\":\"App_image__1CzLw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__crAIg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1Mi9D\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}